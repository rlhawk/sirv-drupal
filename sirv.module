<?php

/**
 * @file
 * Provides integration with Sirv's image service.
 */

define('SIRV_MENU_PATH', 'admin/config/media/sirv');

/**
 * Implements hook_permission().
 */
function sirv_permission() {
  return array(
    'administer sirv settings' => array(
      'title' => t('Administer Sirv settings'),
      'description' => "Modify settings for connecting to Sirv.",
    ),
  );
}

/**
 * Implements hook_menu().
 */
function sirv_menu() {
  $items = array();

  $items[SIRV_MENU_PATH] = array(
    'title' => 'Sirv',
    'description' => 'Settings for connecting to Sirv.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sirv_settings_form'),
    'access arguments' => array('administer sirv settings'),
    'file' => 'sirv.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items[SIRV_MENU_PATH . '/settings'] = array(
    'title' => 'Settings',
    'description' => 'Settings for connecting to Sirv.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sirv_settings_form'),
    'access arguments' => array('administer sirv settings'),
    'file' => 'sirv.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function sirv_theme($existing, $type, $theme, $path) {
  return array(
    'sirv_image_formatter' => array(
      'variables' => array('item' => NULL, 'sirv_profile' => NULL, 'path' => NULL),
      'file' => 'sirv.theme.inc',
    ),
    'sirv_image' => array(
      'variables' => array('path' => NULL, 'width' => NULL, 'height' => NULL, 'alt' => '', 'title' => NULL, 'url_attribute' => 'src', 'attributes' => array()),
      'file' => 'sirv.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function sirv_field_formatter_info() {
  return array(
    'sirv_image' => array(
      'label' => t('Sirv Image'),
      'field types' => array('image'),
      'settings' => array('sirv_profile' => '', 'image_link' => ''),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function sirv_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $profiles = sirv_profiles();
  $element['sirv_profile'] = array(
    '#title' => t('Sirv profile'),
    '#type' => 'select',
    '#default_value' => $settings['sirv_profile'],
    '#empty_option' => t('None (original image)'),
    '#options' => $profiles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function sirv_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $profiles = sirv_profiles();
  if (isset($profiles[$settings['sirv_profile']])) {
    $summary[] = t('Sirv profile: @profile', array('@profile' => $profiles[$settings['sirv_profile']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function sirv_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }

  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
      $options = array();
      if (!empty($display['settings']['sirv_profile'])) {
        $options['query']['profile'] = $display['settings']['sirv_profile'];
      }
      $uri = array(
        'path' => file_create_url($item['uri']),
        'options' => $options,
      );
    }
    $element[$delta] = array(
      '#theme' => 'sirv_image_formatter',
      '#item' => $item,
      '#sirv_profile' => $display['settings']['sirv_profile'],
      '#path' => isset($uri) ? $uri : '',
    );
  }

  return $element;
}

/**
 * Retrieve available Sirv profiles.
 *
 * @return array
 *   An array of Sirv profiles.
 */
function sirv_profiles() {
  $profiles = array();

  $bucket = variable_get('sirv_bucket');
  $profiles_directory = variable_get('sirv_profiles_directory');

  $s3client = _sirv_s3client();

  $iterator = $s3client->getIterator('ListObjects', array(
    'Bucket' => $bucket,
    'Prefix' => $profiles_directory,
  ));

  foreach ($iterator as $object) {
    $key = $object['Key'];
    if (preg_match('#([^/]+)\.profile$#', $key, $matches)) {
      $profiles[$matches[1]] = $matches[1];
    }
  }

  return $profiles;
}

/**
 * Loads the awssdk2 library.
 *
 * @return array
 *   The array returned by libraries_load('awssdk2'), as if it used no cache.
 */
function _sirv_load_awssdk2_library() {
  // Start by calling libraries_load().
  $library = libraries_load('awssdk2');
  // If it detects and loads the library, great! We're done.
  if (!empty($library['loaded'])) {
    return $library;
  }
  // Otherwise, clear the awssdk2 value from the Libraries cache, erase the
  // static data for libraries_load(), then call it again to get the real
  // state of the library.
  cache_clear_all('awssdk2', 'cache_libraries');
  drupal_static_reset('libraries_load');
  return libraries_load('awssdk2');
}

/**
 * Create and return a new S3 Client object.
 *
 * @return S3Client object
 */
function _sirv_s3client(){
  $library = _sirv_load_awssdk2_library();

  $key = variable_get('sirv_key');
  $secret_key = variable_get('sirv_secret_key');
  $host = variable_get('sirv_host');

  $client_config = array(
    'base_url' => $host,
    'key'      => $key,
    'secret'   => $secret_key,
  );

  $s3client = Aws\S3\S3Client::factory($client_config);

  return $s3client;
}
